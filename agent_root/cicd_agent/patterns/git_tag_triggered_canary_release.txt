name: "Git Tag-Triggered Canary Release"
description: "A pattern where every commit runs CI, but a deployment is only initiated when a Git tag is pushed. The release to production is managed by Cloud Deploy using a progressive canary strategy (e.g., 25% -> 100%) to reduce risk."

applicability:
  triggers: ["git_commit", "git_tag"]
  deployment_style: "progressive_delivery"
  use_case_keywords: ["versioned releases", "production pipeline", "canary release", "automated rollout", "reduced blast radius"]

additional_settings:
  delivery_pipeline:
    type: "cloud-deploy-pipeline"
    details: "A two-stage pipeline deploying to staging, followed by a progressive canary rollout to production."
    stages:
      - name: "staging"
        # Standard deployment to staging for final verification.
      - name: "production"
        strategy:
          canary:
            # Defines the traffic percentages for the rollout phases.
            percentages: [25, 100]
            # Indicates that a verification step (e.g., automated testing) should run after the canary phase.
            verification_required: true

stages:
  # The CI stage runs on every commit to verify code quality but does not produce a deployable artifact.
  ci:
    id: "ci_build_and_test"
    type: "cloud-build"
    name: "CI Build and Test"
    details: "Listens for commits on the main branch. Runs lint, test, and builds the container to ensure it's valid, but does not push it."
    steps:
      - id: "lint_step"
        type: "linter"
        name: "Run Linter"
        details: "Runs a static code analysis tool appropriate for the project."
      - id: "test_step"
        type: "test"
        name: "Run Unit Tests"
        details: "Executes the project's unit test suite."
      - id: "dry_run_build_step"
        type: "docker"
        name: "Dry-Run Build"
        details: "Builds the container image to validate the Dockerfile but does not push it."

  # The CD stage is a distinct workflow triggered only by a Git tag.
  cd:
    trigger:
      type: "git_tag"
      details: "This stage is initiated by pushing a git tag (e.g., v1.2.0)."
    steps:
      - id: "build_and_push_release_artifact"
        type: "cloud-build"
        name: "Build and Push Release Artifact"
        details: "Builds the final container image, signs it, and pushes it to Artifact Registry, tagged with the specific Git tag."
      - id: "create_cloud_deploy_release"
        type: "cloud-deploy"
        name: "Create Cloud Deploy Canary Release"
        details: "Creates a new formal release in a Cloud Deploy pipeline configured for a canary rollout to production."

tradeoffs:
  pros:
    - "Dramatically reduces the risk of production incidents by limiting the blast radius of a bad release."
    - "Fully automated process allows for faster and more frequent releases than manual approvals."
    - "Enables data-driven decisions based on monitoring metrics during the canary phase."
  cons:
    - "More complex to set up; requires robust monitoring and observability to be effective."
    - "The application must be architected to handle multiple versions running simultaneously."
